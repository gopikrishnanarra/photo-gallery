{"version":3,"sources":["App.js","utils/decompress.js","utils/compress.js","containers/container.js","actions/index.js","reducers/reducer.js","index.js"],"names":["IMAGES_API","fetchImages","axios","get","then","list","setState","images","props","getImages","uploadingImage","this","data","map","image","decompressed","compressed","i","w","result","k","dictionary","entry","dictSize","String","fromCharCode","length","charAt","decompressData","imageUrl","key","_id","$oid","src","alt","className","uploadImage","post","state","imageFile","App","call","prevProps","prevState","snapshot","getNewImages","files","handleImageUpload","file","Promise","resolve","reject","reader","FileReader","readAsDataURL","onload","onerror","error","toBase64","res","uncompressed","c","wc","hasOwnProperty","push","compressData","imageUploading","onDrop","onImageDrop","bind","accept","multiple","getRootProps","getInputProps","Component","getGalleryStateData","connect","dispatch","type","actions","value","defaultState","reducers","action","store","createStore","combineReducers","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.0866c1fd.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport Dropzone from 'react-dropzone';\r\nimport axios from 'axios';\r\nimport './App.css'\r\nimport compressData from './utils/compress'\r\nimport decompressData from './utils/decompress'\r\n\r\nconst IMAGES_API = 'https://api.mlab.com/api/1/databases/images/collections/images?apiKey=kIOuLscCmhbeSOoBEtJUYPV6vy1TMIaQ';\r\n\r\nfunction fetchImages() {\r\n    axios.get(IMAGES_API)\r\n        .then(list => {\r\n            this.setState({\r\n                images: list\r\n            });\r\n            this.props.getImages(list);\r\n            this.props.uploadingImage(false);\r\n        });\r\n}\r\n\r\nfunction getImages() {\r\n    return this.props.data.images.data.map((image) => {\r\n        const decompressed = decompressData(image.imageUrl);\r\n        return <div>\r\n            <img key={image._id.$oid} src={decompressed} alt=\"\" className=\"image\"/>\r\n        </div>\r\n    })\r\n}\r\n\r\nfunction uploadImage() {\r\n    this.props.uploadingImage(true);\r\n    axios.post(IMAGES_API, {imageUrl: this.state.imageFile});\r\n    this.props.uploadImage();\r\n}\r\n\r\nexport default class App extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            imageFile: \"\",\r\n            images: {}\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        fetchImages.call(this);\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        if (this.props.data.getNewImages) {\r\n            fetchImages.call(this);\r\n        }\r\n    }\r\n\r\n    onImageDrop(files) {\r\n        this.handleImageUpload(files[0]);\r\n    }\r\n\r\n    handleImageUpload(file) {\r\n        const toBase64 = file => new Promise((resolve, reject) => {\r\n            const reader = new FileReader();\r\n            reader.readAsDataURL(file);\r\n            reader.onload = () => resolve(reader.result);\r\n            reader.onerror = error => reject(error);\r\n        });\r\n\r\n        toBase64(file).then(res => {\r\n            const compressed = compressData(res);\r\n            this.setState({\r\n                imageFile: compressed\r\n        });\r\n        uploadImage.call(this);\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                {this.props.data.imageUploading &&\r\n                    <h1>UPLOADING......</h1>\r\n                }\r\n                <div>\r\n                    <div className=\"split left\">\r\n                        <Dropzone\r\n                            onDrop={this.onImageDrop.bind(this)}\r\n                            accept=\"image/*\"\r\n                            multiple={false}>\r\n                            {({getRootProps, getInputProps}) => {\r\n                                return (\r\n                                    <div className=\"dropFile\"\r\n                                        {...getRootProps()}\r\n                                    >\r\n                                        <input {...getInputProps()} />\r\n                                        {\r\n                                            <button className= \"upload\">drop file here, or click to upload</button>\r\n                                        }\r\n                                    </div>\r\n                                )\r\n                            }}\r\n                        </Dropzone>\r\n                    </div>\r\n                    <div className=\"split right\">\r\n                        <div>\r\n                            {this.props.data.images.data && getImages.call(this)}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","export default function decompressData(compressed) {\n    let i,\n        dictionary = [],\n        w,\n        result,\n        k,\n        entry = \"\",\n        dictSize = 256;\n    for (i = 0; i < 256; i += 1) {\n        dictionary[i] = String.fromCharCode(i);\n    }\n\n    w = String.fromCharCode(compressed[0]);\n    result = w;\n    for (i = 1; i < compressed.length; i += 1) {\n        k = compressed[i];\n        if (dictionary[k]) {\n            entry = dictionary[k];\n        } else {\n            if (k === dictSize) {\n                entry = w + w.charAt(0);\n            } else {\n                return null;\n            }\n        }\n\n        result += entry;\n        dictionary[dictSize++] = w + entry.charAt(0);\n\n        w = entry;\n    }\n    return result;\n}\n","export default function compressData(uncompressed) {\n    const dictionary = {},\n        result = []\n    let c,\n        wc,\n        w = \"\",\n        dictSize = 256\n    for (let i = 0; i < 256; i += 1) {\n        dictionary[String.fromCharCode(i)] = i;\n    }\n\n    for (let i = 0; i < uncompressed.length; i += 1) {\n        c = uncompressed.charAt(i);\n        wc = w + c;\n        if (dictionary.hasOwnProperty(wc)) {\n            w = wc;\n        } else {\n            result.push(dictionary[w]);\n            dictionary[wc] = dictSize++;\n            w = String(c);\n        }\n    }\n    if (w !== \"\") {\n        result.push(dictionary[w]);\n    }\n    return result;\n}\n","import { connect } from 'react-redux'\r\nimport * as actions from '../actions'\r\nimport App from '../App'\r\nconst getGalleryStateData = (data) => {\r\n    return data;\r\n};\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        data: getGalleryStateData(state.data)\r\n    }}\r\nconst mapDispatchToProps = dispatch => ({\r\n    getImages: (images) => dispatch(actions.getImages(images)),\r\n    uploadImage: () => dispatch(actions.uploadImage()),\r\n    uploadingImage: (value) => dispatch(actions.uploadingImage(value)),\r\n});\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(App)\r\n","\r\nexport const getImages = (images) => ({\r\n    type: 'GET_IMAGES',\r\n    images: images\r\n});\r\nexport const uploadImage = () => ({\r\n    type: 'UPLOAD_IMAGE'\r\n});\r\nexport const uploadingImage = (value) => ({\r\n    type: 'UPLOADING_IMAGE',\r\n    value: value\r\n});\r\n\r\n","const defaultState = {\r\n    images: [],\r\n    getNewImages: false,\r\n    imageUploading: false\r\n};\r\n\r\nconst reducers = (state = defaultState, action) => {\r\n    if (action.type === 'GET_IMAGES') {\r\n        return {\r\n            ...state,\r\n            images: action.images,\r\n            getNewImages: false\r\n        };\r\n    } else if (action.type === 'UPLOAD_IMAGE') {\r\n        return {\r\n            ...state,\r\n            getNewImages: true\r\n        };\r\n    } else if (action.type === 'UPLOADING_IMAGE') {\r\n        return {\r\n            ...state,\r\n            imageUploading: action.value\r\n        };\r\n    } else {\r\n        return state\r\n    }\r\n    };\r\nexport default reducers\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux'\r\nimport {combineReducers, createStore} from 'redux'\r\nimport Container from './containers/container'\r\nimport './index.css';\r\nimport reducers from './reducers/reducer'\r\n\r\nconst store = createStore(combineReducers({\r\n    data: reducers,\r\n}));\r\nReactDOM.render(\r\n    <Provider store={store}><Container /></Provider>,\r\n    document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}