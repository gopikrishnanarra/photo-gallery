{"version":3,"sources":["App.js","containers/container.js","actions/index.js","index.js"],"names":["IMAGES_API","fetchImages","axios","get","then","list","setState","images","getImages","this","state","data","map","image","src","imageUrl","alt","className","App","props","imageFile","call","files","handleImageUpload","file","Promise","resolve","reject","reader","FileReader","readAsDataURL","onload","result","onerror","error","toBase64","res","post","onDrop","onImageDrop","bind","accept","multiple","getRootProps","getInputProps","Component","getInventoryData","connect","dispatch","getInventory","inventory","type","actions","ReactDOM","render","document","getElementById"],"mappings":"gTAKMA,G,MAAa,0GAEnB,SAASC,IAAe,IAAD,OACnBC,IAAMC,IAAIH,GACLI,MAAK,SAAAC,GACF,EAAKC,SAAS,CACVC,OAAQF,OAKxB,SAASG,IACL,OAAOC,KAAKC,MAAMH,OAAOI,KAAKC,KAAI,SAACC,GAC/B,OAAO,6BACH,yBAAKC,IAAKD,EAAME,SAAUC,IAAI,GAAGC,UAAU,UADxC,Q,IAMMC,E,YAEjB,WAAYC,GAAQ,IAAD,8BACf,4CAAMA,KAEDT,MAAQ,CACTU,UAAW,GACXb,OAAQ,IALG,E,iFAUfN,EAAYoB,KAAKZ,Q,kCAGTa,GACRb,KAAKc,kBAAkBD,EAAM,M,wCAGfE,GAAO,IAAD,QACH,SAAAA,GAAI,OAAI,IAAIC,SAAQ,SAACC,EAASC,GAC3C,IAAMC,EAAS,IAAIC,WACnBD,EAAOE,cAAcN,GACrBI,EAAOG,OAAS,kBAAML,EAAQE,EAAOI,SACrCJ,EAAOK,QAAU,SAAAC,GAAK,OAAIP,EAAOO,QAGrCC,CAASX,GAAMpB,MAAK,SAAAgC,GAChB,EAAK9B,SAAS,CACVc,UAAWgB,IAEnBlC,IAAMmC,KAAKrC,EAAY,CAACe,SAAU,EAAKL,MAAMU,YAC7CnB,EAAYoB,KAAK,Q,+BAKjB,OACI,6BACI,6BACI,yBAAKJ,UAAU,cACX,kBAAC,IAAD,CACIqB,OAAQ7B,KAAK8B,YAAYC,KAAK/B,MAC9BgC,OAAO,UACPC,UAAU,IACT,YAAoC,IAAlCC,EAAiC,EAAjCA,aAAcC,EAAmB,EAAnBA,cACb,OACI,uCAAK3B,UAAU,YACP0B,KAEJ,0BAAWC,KAEP,4BAAQ3B,UAAW,UAAnB,2CAOxB,yBAAKA,UAAU,eACX,6BACKR,KAAKC,MAAMH,OAAOI,MAAQH,EAAUa,KAAKZ,c,GA7DrCoC,a,OCrB3BC,EAAmB,SAACnC,GACtB,OAAOA,GAUIoC,aAPf,SAAyBrC,GACrB,MAAO,CACHC,KAAMmC,EAAiBpC,EAAMC,UAEV,SAAAqC,GAAQ,MAAK,CACpCC,aAAc,SAACC,GAAD,OAAeF,ECXL,SAACE,GAAD,MAAgB,CACxCC,KAAM,gBACND,UAAWA,GDS2BE,CAAqBF,QAEhDH,CAGb7B,G,MELFmC,IAASC,OACL,kBAAC,EAAD,MACFC,SAASC,eAAe,W","file":"static/js/main.4743edaf.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport Dropzone from 'react-dropzone';\r\nimport axios from 'axios';\r\nimport './App.css'\r\n\r\nconst IMAGES_API = 'https://api.mlab.com/api/1/databases/images/collections/images?apiKey=kIOuLscCmhbeSOoBEtJUYPV6vy1TMIaQ';\r\n\r\nfunction fetchImages() {\r\n    axios.get(IMAGES_API)\r\n        .then(list => {\r\n            this.setState({\r\n                images: list\r\n            })\r\n        });\r\n}\r\n\r\nfunction getImages() {\r\n    return this.state.images.data.map((image) => {\r\n        return <div>\r\n            <img src={image.imageUrl} alt=\"\" className=\"image\"/>;\r\n        </div>\r\n    })\r\n}\r\n\r\nexport default class App extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            imageFile: \"\",\r\n            images: {}\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        fetchImages.call(this);\r\n    }\r\n\r\n    onImageDrop(files) {\r\n        this.handleImageUpload(files[0]);\r\n    }\r\n\r\n    handleImageUpload(file) {\r\n        const toBase64 = file => new Promise((resolve, reject) => {\r\n            const reader = new FileReader();\r\n            reader.readAsDataURL(file);\r\n            reader.onload = () => resolve(reader.result);\r\n            reader.onerror = error => reject(error);\r\n        });\r\n\r\n        toBase64(file).then(res => {\r\n            this.setState({\r\n                imageFile: res\r\n        });\r\n        axios.post(IMAGES_API, {imageUrl: this.state.imageFile});\r\n        fetchImages.call(this);\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div>\r\n                    <div className=\"split left\">\r\n                        <Dropzone\r\n                            onDrop={this.onImageDrop.bind(this)}\r\n                            accept=\"image/*\"\r\n                            multiple={false}>\r\n                            {({getRootProps, getInputProps}) => {\r\n                                return (\r\n                                    <div className=\"dropFile\"\r\n                                        {...getRootProps()}\r\n                                    >\r\n                                        <input {...getInputProps()} />\r\n                                        {\r\n                                            <button className= \"upload\">drop file here, or click to upload</button>\r\n                                        }\r\n                                    </div>\r\n                                )\r\n                            }}\r\n                        </Dropzone>\r\n                    </div>\r\n                    <div className=\"split right\">\r\n                        <div>\r\n                            {this.state.images.data && getImages.call(this)}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import { connect } from 'react-redux'\r\nimport * as actions from '../actions'\r\nimport App from '../App'\r\nconst getInventoryData = (data) => {\r\n    return data;\r\n};\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        data: getInventoryData(state.data)\r\n    }}\r\nconst mapDispatchToProps = dispatch => ({\r\n    getInventory: (inventory) => dispatch(actions.getInventory(inventory)),\r\n});\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(App)\r\n","\r\nexport const getInventory = (inventory) => ({\r\n    type: 'GET_INVENTORY',\r\n    inventory: inventory\r\n});\r\n\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from '../src/App'\r\nimport { Provider } from 'react-redux'\r\n// import {combineReducers, createStore} from 'redux'\r\nimport Container from './containers/container'\r\nimport './index.css';\r\n// import reducers from './reducers/reducer'\r\n\r\n// const store = createStore(combineReducers({\r\n//     data: reducers,\r\n// }));\r\nReactDOM.render(\r\n    <App />,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}