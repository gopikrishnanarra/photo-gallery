{"version":3,"sources":["App.js","containers/container.js","actions/index.js","index.js"],"names":["fetchImages","axios","get","then","list","setState","images","data","resources","map","res","secure_url","App","props","state","uploadedFileCloudinaryUrl","call","this","prevProps","prevState","snapshot","files","uploadedFile","handleImageUpload","file","request","post","field","end","err","response","console","error","body","photos","image","src","width","height","onDrop","onImageDrop","bind","accept","multiple","getRootProps","getInputProps","className","Component","getInventoryData","connect","dispatch","getInventory","inventory","type","actions","ReactDOM","render","document","getElementById"],"mappings":"gVAUA,SAASA,IAAe,IAAD,OACnBC,IAAMC,IAAI,wGACLC,MAAK,SAAAC,GACF,EAAKC,SAAS,CACVC,OAAQF,EAAKG,KAAKC,UAAUC,KAAI,SAACC,GAC7B,OAAOA,EAAIC,mB,IAMVC,E,YAEjB,WAAYC,GAAQ,IAAD,8BACf,4CAAMA,KAEDC,MAAQ,CACTC,0BAA2B,GAC3BT,OAAQ,IALG,E,iFAUfN,EAAYgB,KAAKC,Q,yCAGFC,EAAWC,EAAWC,GACjCH,KAAKH,MAAMC,4BAA8BI,EAAUJ,2BACnDf,EAAYgB,KAAKC,Q,kCAIbI,GACRJ,KAAKZ,SAAS,CACViB,aAAcD,EAAM,KAGxBJ,KAAKM,kBAAkBF,EAAM,M,wCAGfG,GAAO,IAAD,OACPC,IAAQC,KA3CC,mDA4CjBC,MAAM,gBA7Cc,YA8CpBA,MAAM,OAAQH,GACRI,KAAI,SAACC,EAAKC,GACbD,GACAE,QAAQC,MAAMH,GAGe,KAA7BC,EAASG,KAAKtB,YACd,EAAKN,SAAS,CACVU,0BAA2Be,EAASG,KAAKtB,kB,+BAOrD,IAAMuB,EAASjB,KAAKH,MAAMR,OAAOG,KAAI,SAAC0B,GAClC,MAAO,CACHC,IAAKD,EACLE,MAAO,EACPC,OAAQ,MAIhB,OACI,6BACI,6BACI,kBAAC,IAAD,CAASJ,OAAQA,IACjB,kBAAC,IAAD,CACAK,OAAQtB,KAAKuB,YAAYC,KAAKxB,MAC9ByB,OAAO,UACPC,UAAU,IACT,YAAoC,IAAlCC,EAAiC,EAAjCA,aAAcC,EAAmB,EAAnBA,cACb,OACI,uCAAKC,UAAU,YACPF,KAEJ,0BAAWC,KAEP,4BAAQC,UAAW,UAAnB,gD,GAtEHC,a,OClB3BC,EAAmB,SAACzC,GACtB,OAAOA,GAUI0C,aAPf,SAAyBnC,GACrB,MAAO,CACHP,KAAMyC,EAAiBlC,EAAMP,UAEV,SAAA2C,GAAQ,MAAK,CACpCC,aAAc,SAACC,GAAD,OAAeF,ECXL,SAACE,GAAD,MAAgB,CACxCC,KAAM,gBACND,UAAWA,GDS2BE,CAAqBF,QAEhDH,CAGbrC,G,MELF2C,IAASC,OACL,kBAAC,EAAD,MACFC,SAASC,eAAe,W","file":"static/js/main.e49db8af.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport Dropzone from 'react-dropzone';\r\nimport Gallery from 'react-photo-gallery';\r\nimport axios from 'axios';\r\nimport request from 'superagent';\r\nimport './App.css'\r\n\r\nconst CLOUDINARY_UPLOAD_PRESET = 'gkupload';\r\nconst CLOUDINARY_UPLOAD_URL = 'https://api.cloudinary.com/v1_1/gkimages/upload';\r\n\r\nfunction fetchImages() {\r\n    axios.get('https://583445573231844:knWGSHrzyKFV-3tqojei9yhtP-o@api.cloudinary.com/v1_1/gkimages/resources/image')\r\n        .then(list => {\r\n            this.setState({\r\n                images: list.data.resources.map((res) => {\r\n                    return res.secure_url;\r\n                })\r\n            })\r\n        });\r\n}\r\n\r\nexport default class App extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            uploadedFileCloudinaryUrl: '',\r\n            images: []\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        fetchImages.call(this);\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        if (this.state.uploadedFileCloudinaryUrl !== prevState.uploadedFileCloudinaryUrl) {\r\n            fetchImages.call(this);\r\n        }\r\n    }\r\n\r\n    onImageDrop(files) {\r\n        this.setState({\r\n            uploadedFile: files[0]\r\n        });\r\n\r\n        this.handleImageUpload(files[0]);\r\n    }\r\n\r\n    handleImageUpload(file) {\r\n        let upload = request.post(CLOUDINARY_UPLOAD_URL)\r\n            .field('upload_preset', CLOUDINARY_UPLOAD_PRESET)\r\n            .field('file', file);\r\n            upload.end((err, response) => {\r\n            if (err) {\r\n                console.error(err);\r\n            }\r\n\r\n            if (response.body.secure_url !== '') {\r\n                this.setState({\r\n                    uploadedFileCloudinaryUrl: response.body.secure_url\r\n                });\r\n            }\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const photos = this.state.images.map((image) => {\r\n            return {\r\n                src: image,\r\n                width: 2,\r\n                height: 1\r\n            }\r\n        });\r\n\r\n        return (\r\n            <div>\r\n                <div>\r\n                    <Gallery photos={photos} />\r\n                    <Dropzone\r\n                    onDrop={this.onImageDrop.bind(this)}\r\n                    accept=\"image/*\"\r\n                    multiple={false}>\r\n                    {({getRootProps, getInputProps}) => {\r\n                        return (\r\n                            <div className=\"dropFile\"\r\n                                {...getRootProps()}\r\n                            >\r\n                                <input {...getInputProps()} />\r\n                                {\r\n                                    <button className= \"upload\">drop file here, or click to upload</button>\r\n                                }\r\n                            </div>\r\n                        )\r\n                    }}\r\n                </Dropzone>\r\n            </div>\r\n        </div>\r\n\r\n        )\r\n    }\r\n}\r\n","import { connect } from 'react-redux'\r\nimport * as actions from '../actions'\r\nimport App from '../App'\r\nconst getInventoryData = (data) => {\r\n    return data;\r\n};\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        data: getInventoryData(state.data)\r\n    }}\r\nconst mapDispatchToProps = dispatch => ({\r\n    getInventory: (inventory) => dispatch(actions.getInventory(inventory)),\r\n});\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(App)\r\n","\r\nexport const getInventory = (inventory) => ({\r\n    type: 'GET_INVENTORY',\r\n    inventory: inventory\r\n});\r\n\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from '../src/App'\r\nimport { Provider } from 'react-redux'\r\n// import {combineReducers, createStore} from 'redux'\r\nimport Container from './containers/container'\r\nimport './index.css';\r\n// import reducers from './reducers/reducer'\r\n\r\n// const store = createStore(combineReducers({\r\n//     data: reducers,\r\n// }));\r\nReactDOM.render(\r\n    <App />,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}