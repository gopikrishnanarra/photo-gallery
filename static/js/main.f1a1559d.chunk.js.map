{"version":3,"sources":["App.js","containers/container.js","actions/index.js","index.js"],"names":["GET_SCREEN_IMAGES","GET_CLOUD_IMAGES","fetchScreenImages","axios","get","then","list","console","log","setState","screenImages","data","resources","map","res","public_id","fetchCloudImages","cloudImages","getScreenImages","this","state","image","cloudName","publicId","width","height","getCloudImages","App","props","uploadedFileCloudinaryUrl","call","prevProps","prevState","snapshot","files","uploadedFile","handleImageUpload","file","request","post","field","end","err","response","error","body","secure_url","className","onDrop","onImageDrop","bind","accept","multiple","getRootProps","getInputProps","length","Component","getInventoryData","connect","dispatch","getInventory","inventory","type","actions","ReactDOM","render","document","getElementById"],"mappings":"0SASMA,G,OAAoB,8DACpBC,EAAmB,4DAEzB,SAASC,IAAqB,IAAD,OACzBC,IAAMC,IAAIJ,GACLK,MAAK,SAAAC,GACFC,QAAQC,IAAIF,GACZ,EAAKG,SAAS,CACVC,aAAcJ,EAAKK,KAAKC,UAAUC,KAAI,SAACC,GACnC,OAAOA,EAAIC,kBAK/B,SAASC,IAAoB,IAAD,OACxBb,IAAMC,IAAIH,GACLI,MAAK,SAAAC,GACFC,QAAQC,IAAIF,GACZ,EAAKG,SAAS,CACVQ,YAAaX,EAAKK,KAAKC,UAAUC,KAAI,SAACC,GAClC,OAAOA,EAAIC,kBAM/B,SAASG,IACL,OAAOC,KAAKC,MAAMV,aAAaG,KAAI,SAACQ,GAEhC,OADAd,QAAQC,IAAIa,GACL,kBAAC,QAAD,CAAOC,UAAU,WAAWC,SAAUF,EAAOG,MAAM,MAAMC,OAAO,WAG/E,SAASC,IACL,OAAOP,KAAKC,MAAMH,YAAYJ,KAAI,SAACQ,GAE/B,OADAd,QAAQC,IAAIa,GACL,kBAAC,QAAD,CAAOC,UAAU,WAAWC,SAAUF,EAAOG,MAAM,MAAMC,OAAO,W,IAI1DE,E,YAEjB,WAAYC,GAAQ,IAAD,8BACf,4CAAMA,KAEDR,MAAQ,CACTS,0BAA2B,GAC3BnB,aAAc,GACdO,YAAa,IANF,E,iFAWff,EAAkB4B,KAAKX,MACvBH,EAAiBc,KAAKX,Q,yCAGPY,EAAWC,EAAWC,GACjCd,KAAKC,MAAMS,4BAA8BG,EAAUH,4BACnD3B,EAAkB4B,KAAKX,MACvBH,EAAiBc,KAAKX,S,kCAIlBe,GACRf,KAAKV,SAAS,CACV0B,aAAcD,EAAM,KAGxBf,KAAKiB,kBAAkBF,EAAM,M,wCAGfG,GAAO,IAAD,OACPC,IAAQC,KAzEC,mDA0EjBC,MAAM,gBA3Ec,YA4EpBA,MAAM,OAAQH,GACdG,MAAM,OAAQ,SACRC,KAAI,SAACC,EAAKC,GACbD,GACAnC,QAAQqC,MAAMF,GAGe,KAA7BC,EAASE,KAAKC,YACd,EAAKrC,SAAS,CACVoB,0BAA2Bc,EAASE,KAAKC,kB,+BAOrD,OACI,6BACI,6BACI,yBAAKC,UAAU,cACX,kBAAC,IAAD,CACIC,OAAQ7B,KAAK8B,YAAYC,KAAK/B,MAC9BgC,OAAO,UACPC,UAAU,IACT,YAAoC,IAAlCC,EAAiC,EAAjCA,aAAcC,EAAmB,EAAnBA,cACb,OACI,uCAAKP,UAAU,YACPM,KAEJ,0BAAWC,KAEP,4BAAQP,UAAW,UAAnB,2CAOxB,yBAAKA,UAAU,eACX,6BACC5B,KAAKC,MAAMV,aAAa6C,OAAS,GAAKrC,EAAgBY,KAAKX,MAC3DA,KAAKC,MAAMH,YAAYsC,OAAS,GAAK7B,EAAeI,KAAKX,c,GA5EjDqC,a,QC7C3BC,EAAmB,SAAC9C,GACtB,OAAOA,GAUI+C,aAPf,SAAyBtC,GACrB,MAAO,CACHT,KAAM8C,EAAiBrC,EAAMT,UAEV,SAAAgD,GAAQ,MAAK,CACpCC,aAAc,SAACC,GAAD,OAAeF,ECXL,SAACE,GAAD,MAAgB,CACxCC,KAAM,gBACND,UAAWA,GDS2BE,CAAqBF,QAEhDH,CAGb/B,G,OELFqC,IAASC,OACL,kBAAC,EAAD,MACFC,SAASC,eAAe,U","file":"static/js/main.f1a1559d.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport { Image } from 'cloudinary-react';\r\nimport Dropzone from 'react-dropzone';\r\nimport axios from 'axios';\r\nimport request from 'superagent';\r\nimport './App.css'\r\n\r\nconst CLOUDINARY_UPLOAD_PRESET = 'gkupload';\r\nconst CLOUDINARY_UPLOAD_URL = 'https://api.cloudinary.com/v1_1/gkimages/upload';\r\nconst GET_SCREEN_IMAGES = 'https://res.cloudinary.com/gkimages/image/list/screen.json';\r\nconst GET_CLOUD_IMAGES = 'https://res.cloudinary.com/gkimages/image/list/cloud.json';\r\n\r\nfunction fetchScreenImages() {\r\n    axios.get(GET_SCREEN_IMAGES)\r\n        .then(list => {\r\n            console.log(list);\r\n            this.setState({\r\n                screenImages: list.data.resources.map((res) => {\r\n                    return res.public_id;\r\n                })\r\n            })\r\n        });\r\n}\r\nfunction fetchCloudImages() {\r\n    axios.get(GET_CLOUD_IMAGES)\r\n        .then(list => {\r\n            console.log(list)\r\n            this.setState({\r\n                cloudImages: list.data.resources.map((res) => {\r\n                    return res.public_id;\r\n                })\r\n            })\r\n        });\r\n}\r\n\r\nfunction getScreenImages() {\r\n    return this.state.screenImages.map((image) => {\r\n        console.log(image);\r\n        return <Image cloudName=\"gkimages\" publicId={image} width=\"300\" height=\"200\"/>;\r\n    })\r\n}\r\nfunction getCloudImages() {\r\n    return this.state.cloudImages.map((image) => {\r\n        console.log(image);\r\n        return <Image cloudName=\"gkimages\" publicId={image} width=\"300\" height=\"200\"/>;\r\n    })\r\n}\r\n\r\nexport default class App extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            uploadedFileCloudinaryUrl: '',\r\n            screenImages: [],\r\n            cloudImages: []\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        fetchScreenImages.call(this);\r\n        fetchCloudImages.call(this);\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        if (this.state.uploadedFileCloudinaryUrl !== prevState.uploadedFileCloudinaryUrl) {\r\n            fetchScreenImages.call(this);\r\n            fetchCloudImages.call(this);\r\n        }\r\n    }\r\n\r\n    onImageDrop(files) {\r\n        this.setState({\r\n            uploadedFile: files[0]\r\n        });\r\n\r\n        this.handleImageUpload(files[0]);\r\n    }\r\n\r\n    handleImageUpload(file) {\r\n        let upload = request.post(CLOUDINARY_UPLOAD_URL)\r\n            .field('upload_preset', CLOUDINARY_UPLOAD_PRESET)\r\n            .field('file', file)\r\n            .field('tags', 'cloud');\r\n            upload.end((err, response) => {\r\n            if (err) {\r\n                console.error(err);\r\n            }\r\n\r\n            if (response.body.secure_url !== '') {\r\n                this.setState({\r\n                    uploadedFileCloudinaryUrl: response.body.secure_url\r\n                });\r\n            }\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div>\r\n                    <div className=\"split left\">\r\n                        <Dropzone\r\n                            onDrop={this.onImageDrop.bind(this)}\r\n                            accept=\"image/*\"\r\n                            multiple={false}>\r\n                            {({getRootProps, getInputProps}) => {\r\n                                return (\r\n                                    <div className=\"dropFile\"\r\n                                        {...getRootProps()}\r\n                                    >\r\n                                        <input {...getInputProps()} />\r\n                                        {\r\n                                            <button className= \"upload\">drop file here, or click to upload</button>\r\n                                        }\r\n                                    </div>\r\n                                )\r\n                            }}\r\n                        </Dropzone>\r\n                    </div>\r\n                    <div className=\"split right\">\r\n                        <div>\r\n                        {this.state.screenImages.length > 0 && getScreenImages.call(this)}\r\n                        {this.state.cloudImages.length > 0 && getCloudImages.call(this)}\r\n                        </div>\r\n                    </div>\r\n\r\n                </div>\r\n            </div>\r\n\r\n        )\r\n    }\r\n}\r\n","import { connect } from 'react-redux'\r\nimport * as actions from '../actions'\r\nimport App from '../App'\r\nconst getInventoryData = (data) => {\r\n    return data;\r\n};\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        data: getInventoryData(state.data)\r\n    }}\r\nconst mapDispatchToProps = dispatch => ({\r\n    getInventory: (inventory) => dispatch(actions.getInventory(inventory)),\r\n});\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(App)\r\n","\r\nexport const getInventory = (inventory) => ({\r\n    type: 'GET_INVENTORY',\r\n    inventory: inventory\r\n});\r\n\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from '../src/App'\r\nimport { Provider } from 'react-redux'\r\n// import {combineReducers, createStore} from 'redux'\r\nimport Container from './containers/container'\r\nimport './index.css';\r\n// import reducers from './reducers/reducer'\r\n\r\n// const store = createStore(combineReducers({\r\n//     data: reducers,\r\n// }));\r\nReactDOM.render(\r\n    <App />,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}