{"version":3,"sources":["App.js","containers/container.js","actions/index.js","reducers/reducer.js","index.js"],"names":["IMAGES_API","fetchImages","axios","get","then","list","setState","images","props","getImages","this","data","map","image","key","_id","$oid","src","imageUrl","alt","className","uploadImage","post","state","imageFile","App","call","prevProps","prevState","snapshot","getNewImages","files","handleImageUpload","file","Promise","resolve","reject","reader","FileReader","readAsDataURL","onload","result","onerror","error","toBase64","res","onDrop","onImageDrop","bind","accept","multiple","getRootProps","getInputProps","Component","getGalleryStateData","connect","dispatch","type","actions","defaultState","reducers","action","store","createStore","combineReducers","ReactDOM","render","document","getElementById"],"mappings":"+TAKMA,G,MAAa,0GAEnB,SAASC,IAAe,IAAD,OACnBC,IAAMC,IAAIH,GACLI,MAAK,SAAAC,GACF,EAAKC,SAAS,CACVC,OAAQF,IAEZ,EAAKG,MAAMC,UAAUJ,MAIjC,SAASI,IACL,OAAOC,KAAKF,MAAMG,KAAKJ,OAAOI,KAAKC,KAAI,SAACC,GACpC,OAAO,6BACH,yBAAKC,IAAKD,EAAME,IAAIC,KAAMC,IAAKJ,EAAMK,SAAUC,IAAI,GAAGC,UAAU,UAD7D,QAMf,SAASC,IACLnB,IAAMoB,KAAKtB,EAAY,CAACkB,SAAUR,KAAKa,MAAMC,YAC7Cd,KAAKF,MAAMa,c,IAGMI,E,YAEjB,WAAYjB,GAAQ,IAAD,8BACf,4CAAMA,KAEDe,MAAQ,CACTC,UAAW,GACXjB,OAAQ,IALG,E,iFAUfN,EAAYyB,KAAKhB,Q,yCAGFiB,EAAWC,EAAWC,GACjCnB,KAAKF,MAAMG,KAAKmB,cAChB7B,EAAYyB,KAAKhB,Q,kCAIbqB,GACRrB,KAAKsB,kBAAkBD,EAAM,M,wCAGfE,GAAO,IAAD,QACH,SAAAA,GAAI,OAAI,IAAIC,SAAQ,SAACC,EAASC,GAC3C,IAAMC,EAAS,IAAIC,WACnBD,EAAOE,cAAcN,GACrBI,EAAOG,OAAS,kBAAML,EAAQE,EAAOI,SACrCJ,EAAOK,QAAU,SAAAC,GAAK,OAAIP,EAAOO,QAGrCC,CAASX,GAAM7B,MAAK,SAAAyC,GAChB,EAAKvC,SAAS,CACVkB,UAAWqB,IAEnBxB,EAAYK,KAAK,Q,+BAKjB,OACI,6BACI,6BACI,yBAAKN,UAAU,cACX,kBAAC,IAAD,CACI0B,OAAQpC,KAAKqC,YAAYC,KAAKtC,MAC9BuC,OAAO,UACPC,UAAU,IACT,YAAoC,IAAlCC,EAAiC,EAAjCA,aAAcC,EAAmB,EAAnBA,cACb,OACI,uCAAKhC,UAAU,YACP+B,KAEJ,0BAAWC,KAEP,4BAAQhC,UAAW,UAAnB,2CAOxB,yBAAKA,UAAU,eACX,6BACKV,KAAKF,MAAMG,KAAKJ,OAAOI,MAAQF,EAAUiB,KAAKhB,c,GAlE1C2C,aC3B3BC,EAAsB,SAAC3C,GACzB,OAAOA,GAOX,IAIe4C,eARf,SAAyBhC,GACrB,MAAO,CACHZ,KAAM2C,EAAoB/B,EAAMZ,UAEb,SAAA6C,GAAQ,MAAK,CACpC/C,UAAW,SAACF,GAAD,OAAYiD,ECXF,SAACjD,GAAD,MAAa,CAClCkD,KAAM,aACNlD,OAAQA,GDSwBmD,CAAkBnD,KAClDc,YAAa,kBAAMmC,ECRW,CAC9BC,KAAM,qBDSKF,CAGb9B,G,ykBElBF,IAAMkC,EAAe,CACjBpD,OAAQ,GACRuB,cAAc,GAmBH8B,EAhBE,WAAmC,IAAlCrC,EAAiC,uDAAzBoC,EAAcE,EAAW,uCAC/C,MAAoB,eAAhBA,EAAOJ,KACA,EAAP,GACOlC,EADP,CAEIhB,OAAQsD,EAAOtD,OACfuB,cAAc,IAEK,iBAAhB+B,EAAOJ,KACP,EAAP,GACOlC,EADP,CAEIO,cAAc,IAGXP,GCVTuC,EAAQC,YAAYC,YAAgB,CACtCrD,KAAMiD,KAEVK,IAASC,OACL,kBAAC,IAAD,CAAUJ,MAAOA,GAAO,kBAAC,EAAD,OACxBK,SAASC,eAAe,W","file":"static/js/main.effe7292.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport Dropzone from 'react-dropzone';\r\nimport axios from 'axios';\r\nimport './App.css'\r\n\r\nconst IMAGES_API = 'https://api.mlab.com/api/1/databases/images/collections/images?apiKey=kIOuLscCmhbeSOoBEtJUYPV6vy1TMIaQ';\r\n\r\nfunction fetchImages() {\r\n    axios.get(IMAGES_API)\r\n        .then(list => {\r\n            this.setState({\r\n                images: list\r\n            });\r\n            this.props.getImages(list)\r\n        });\r\n}\r\n\r\nfunction getImages() {\r\n    return this.props.data.images.data.map((image) => {\r\n        return <div>\r\n            <img key={image._id.$oid} src={image.imageUrl} alt=\"\" className=\"image\"/>;\r\n        </div>\r\n    })\r\n}\r\n\r\nfunction uploadImage() {\r\n    axios.post(IMAGES_API, {imageUrl: this.state.imageFile});\r\n    this.props.uploadImage();\r\n}\r\n\r\nexport default class App extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            imageFile: \"\",\r\n            images: {}\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        fetchImages.call(this);\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        if (this.props.data.getNewImages) {\r\n            fetchImages.call(this);\r\n        }\r\n    }\r\n\r\n    onImageDrop(files) {\r\n        this.handleImageUpload(files[0]);\r\n    }\r\n\r\n    handleImageUpload(file) {\r\n        const toBase64 = file => new Promise((resolve, reject) => {\r\n            const reader = new FileReader();\r\n            reader.readAsDataURL(file);\r\n            reader.onload = () => resolve(reader.result);\r\n            reader.onerror = error => reject(error);\r\n        });\r\n\r\n        toBase64(file).then(res => {\r\n            this.setState({\r\n                imageFile: res\r\n        });\r\n        uploadImage.call(this);\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div>\r\n                    <div className=\"split left\">\r\n                        <Dropzone\r\n                            onDrop={this.onImageDrop.bind(this)}\r\n                            accept=\"image/*\"\r\n                            multiple={false}>\r\n                            {({getRootProps, getInputProps}) => {\r\n                                return (\r\n                                    <div className=\"dropFile\"\r\n                                        {...getRootProps()}\r\n                                    >\r\n                                        <input {...getInputProps()} />\r\n                                        {\r\n                                            <button className= \"upload\">drop file here, or click to upload</button>\r\n                                        }\r\n                                    </div>\r\n                                )\r\n                            }}\r\n                        </Dropzone>\r\n                    </div>\r\n                    <div className=\"split right\">\r\n                        <div>\r\n                            {this.props.data.images.data && getImages.call(this)}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import { connect } from 'react-redux'\r\nimport * as actions from '../actions'\r\nimport App from '../App'\r\nconst getGalleryStateData = (data) => {\r\n    return data;\r\n};\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        data: getGalleryStateData(state.data)\r\n    }}\r\nconst mapDispatchToProps = dispatch => ({\r\n    getImages: (images) => dispatch(actions.getImages(images)),\r\n    uploadImage: () => dispatch(actions.uploadImage()),\r\n});\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(App)\r\n","\r\nexport const getImages = (images) => ({\r\n    type: 'GET_IMAGES',\r\n    images: images\r\n});\r\nexport const uploadImage = () => ({\r\n    type: 'UPLOAD_IMAGE'\r\n});\r\n\r\n","const defaultState = {\r\n    images: [],\r\n    getNewImages: false\r\n};\r\n\r\nconst reducers = (state = defaultState, action) => {\r\n    if (action.type === 'GET_IMAGES') {\r\n        return {\r\n            ...state,\r\n            images: action.images,\r\n            getNewImages: false\r\n        };\r\n    } else if (action.type === 'UPLOAD_IMAGE') {\r\n        return {\r\n            ...state,\r\n            getNewImages: true\r\n        };\r\n    } else {\r\n        return state\r\n    }\r\n    };\r\nexport default reducers\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux'\r\nimport {combineReducers, createStore} from 'redux'\r\nimport Container from './containers/container'\r\nimport './index.css';\r\nimport reducers from './reducers/reducer'\r\n\r\nconst store = createStore(combineReducers({\r\n    data: reducers,\r\n}));\r\nReactDOM.render(\r\n    <Provider store={store}><Container /></Provider>,\r\n    document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}